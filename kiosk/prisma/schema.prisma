// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id                  String @id @default(uuid())
  clerkUserId         String @unique
  email               String @unique
  name                String?
  imageUrl            String?
  role                UserRole @default(UNASSIGNED)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  credits             Int @default(2)

  specialty           String?
  experience          Int?
  credentialUrl       String?
  description         String?
  verificationStatus  VerificationStatus? @default(PENDING)

  patientAppointment Appointment[] @relation("PatientAppointments")
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  availabilities     Availability[]
  transactions       CreditTransaction[]
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Availability {
  id                String @id @default(uuid())
  doctorId          String
  doctor            User   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime         DateTime
  endTime           DateTime
  status            SlotStatus @default(AVALIABLE)
  date              DateTime
  

  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVALIABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id                String   @id @default(uuid())
  patientId         String
  patient           User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId          String
  doctor            User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  date              DateTime 
  startTime         DateTime // Start time of appointment
  endTime           DateTime // End time of appointment
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?  @db.Text
  patientDescription String? @db.Text
    
  // Video session fields
  videoSessionId    String?  // Vonage Video API Session ID
  videoSessionToken String?  // Optional: Can store tokens if needed
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model CreditTransaction {
  id                String @id @default(uuid())
  userId            String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Int
  type              TransactionType
  packageId         String
  createdAt         DateTime @default(now())
}

enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
}

model Document {
  id          String   @id @default(cuid())
  userId      String   // Clerk User ID
  fileName    String
  fileUrl     String
  uploadedAt  DateTime @default(now())
  type        String?  // e.g., "Report", "Prescription", etc.
  uploadedBy  String   // "PATIENT" or "DOCTOR"
}
